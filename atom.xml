<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zy499</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-28T06:52:39.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>媒体查询使用——@media</title>
    <link href="http://yoursite.com/2018/04/28/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/04/28/媒体查询/</id>
    <published>2018-04-28T06:39:16.810Z</published>
    <updated>2018-04-28T06:52:39.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="媒体查询使用方法-media"><a href="#媒体查询使用方法-media" class="headerlink" title="媒体查询使用方法@media"></a>媒体查询使用方法@media</h1><p>标签（空格分隔）： css3,html5</p><hr><p>Media Queries能在不同的条件下使用不同的样式，使页面在不同在终端设备下达到不同的渲染效果。前面简单的介绍了Media Queries如何引用到项目中，但Media Queries有其自己的使用规则。具体来说,Media Queries的使用方法如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media 媒体类型and （媒体特性）&#123;你的样式&#125;</span><br></pre></td></tr></table></figure></p><p>注意：使用Media Queries必须要使用“@media”开头，然后指定媒体类型（也可以称为设备类型），随后是指定媒体特性（也可以称之为设备特性）。媒体特性的书写方式和样式的书写方式非常相似，主要分为两个部分，第一个部分指的是媒体特性，第二部分为媒体特性所指定的值，而且这两个部分之间使用冒号分隔。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(max-width: 480px)</span><br></pre></td></tr></table></figure></p><p>从前面表中可以得知，主要有十种媒体类型和13种媒体特性，将其组合就类似于不同的CSS集合。<br>但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断，<br>而不是使用小于（&lt;）和大于（&gt;）这样的符号来判断。接下来一起来看看Media Queries在实际项目中常用的方式。</p><h2 id="1-最大宽度max-width"><a href="#1-最大宽度max-width" class="headerlink" title="1.最大宽度max-width"></a>1.最大宽度max-width</h2><p>“max-width”是媒体特性中最常用的一个特性，其意思是指媒体类型小于或等于指定的宽度时，样式生效。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:480px)&#123;</span><br><span class="line"> .ads &#123;</span><br><span class="line">   display:none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面表示的是：当屏幕小于或等于480px时,页面中的广告区块（.ads）都将被隐藏。</p><h2 id="2-最小宽度min-width"><a href="#2-最小宽度min-width" class="headerlink" title="2.最小宽度min-width"></a>2.最小宽度min-width</h2><p>“min-width”与“max-width”相反，指的是媒体类型大于或等于指定宽度时，样式生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:900px)&#123;</span><br><span class="line">.wrapper&#123;width: 980px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面表示的是：当屏幕大于或等于900px时，容器“.wrapper”的宽度为980px。</p><h2 id="3-多个媒体特性使用"><a href="#3-多个媒体特性使用" class="headerlink" title="3.多个媒体特性使用"></a>3.多个媒体特性使用</h2><p>Media Queries可以使用关键词”and”将多个媒体特性结合在一起。也就是说，一个Media Query中可以包含0到多个表达式，表达式又可以包含0到多个关键字，以及一种媒体类型。</p><p>当屏幕在600px~900px之间时，body的背景色渲染为“#f5f5f5”，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:600px) and (max-width:900px)&#123;</span><br><span class="line">  body &#123;background-color:#f5f5f5;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-设备屏幕的输出宽度Device-Width"><a href="#4-设备屏幕的输出宽度Device-Width" class="headerlink" title="4.设备屏幕的输出宽度Device Width"></a>4.设备屏幕的输出宽度Device Width</h2><p>在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>上面的代码指的是“iphone.css”样式适用于最大设备宽度为480px，比如说iPhone上的显示，这里的“max-device-width”所指的是设备的实际分辨率，也就是指可视面积分辨率。</p><ol start="5"><li>not关键词</li></ol><hr><p>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media not print and (max-width: 1200px)&#123;样式代码&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码表示的是：样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。</p><h2 id="6-only关键词"><a href="#6-only关键词" class="headerlink" title="6.only关键词"></a>6.only关键词</h2><hr><p>only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width:240px)&quot; href=&quot;android240.css&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>在Media Query中如果没有明确指定Media Type，那么其默认为all，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;(min-width:701px) and (max-width:900px)&quot; href=&quot;mediu.css&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>上面代码中style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。</p><p>到目前为止，CSS3 Media Queries得到了众多浏览器支持，除了IE6-8浏览器不支持之外，在所有现代浏览器中都可以完美支持。还有一个与众不同的是，Media Queries在其他浏览器中不要像其他CSS3属性一样在不同的浏览器中添加前缀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;媒体查询使用方法-media&quot;&gt;&lt;a href=&quot;#媒体查询使用方法-media&quot; class=&quot;headerlink&quot; title=&quot;媒体查询使用方法@media&quot;&gt;&lt;/a&gt;媒体查询使用方法@media&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： css3,html5&lt;/
      
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/html/css/"/>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>作用域与执行上下文</title>
    <link href="http://yoursite.com/2015/10/29/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://yoursite.com/2015/10/29/作用域与执行上下文/</id>
    <published>2015-10-28T16:00:00.000Z</published>
    <updated>2018-05-01T06:55:23.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域和执行上下文"><a href="#作用域和执行上下文" class="headerlink" title="作用域和执行上下文"></a>作用域和执行上下文</h3><p>除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时确定。<br><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = 10, b = 20;</span><br><span class="line">function fn(x) &#123;</span><br><span class="line">    var a = 100, c = 300;</span><br><span class="line">    function bar(x) &#123;</span><br><span class="line">        var a = 1000, d = 4000;</span><br><span class="line">    &#125;</span><br><span class="line">    bar(100);</span><br><span class="line">bar(200);</span><br><span class="line">&#125;</span><br><span class="line">fn(10);</span><br></pre></td></tr></table></figure></p><p><strong>1. 作用域和执行上下文关系如图:</strong><br><img src="img/ExecutionContext_14.png" alt=""><br><strong>说明:</strong> 作用域只是一个”地盘”,一个抽象的概念,其中没有变量.要通过作用域对应的执行上下文环境来获取变量的值.在同一个作用域下,不同的调用会产生不同的执行上下文环境,继而产生不同的变量的值.</p><p><strong>2. 自由变量</strong><br>在A作用域中使用的变量x,却没有在A作用域中声明(即在其他作用域中声明的),对于A作用域来说,x就是一个自由变量.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(x); //这里的x就是一个自由变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3. 作用域链</strong></p><ol><li>先在当前作用域查找x,如果有则获取并结束,如果没有则继续;</li><li>如果当前作用域是全局作用域，则证明x未定义，结束；否则继续；</li><li>（不是全局作用域，那就是函数作用域）将创建该函数的作用域作为当前作用域；</li><li>跳转到第一步。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;作用域和执行上下文&quot;&gt;&lt;a href=&quot;#作用域和执行上下文&quot; class=&quot;headerlink&quot; title=&quot;作用域和执行上下文&quot;&gt;&lt;/a&gt;作用域和执行上下文&lt;/h3&gt;&lt;p&gt;除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>原型</title>
    <link href="http://yoursite.com/2015/10/28/02_prototype%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2015/10/28/02_prototype原型/</id>
    <published>2015-10-28T00:53:22.000Z</published>
    <updated>2018-04-28T07:15:00.542Z</updated>
    
    <content type="html"><![CDATA[<p>##prototype原型</p><p>###1. 函数与对象的关系</p><p> **1.1 函数就是对象的一种，因为通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">function fn() &#123;&#125;</span><br><span class="line">console.log(fn instanceof Object);//返回为true,说明函数是对象类型</span><br></pre></td></tr></table></figure></p><p> <strong>1.2 对象是函数创建的</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line">obj.a = 10;</span><br><span class="line">obj.b = 20;</span><br><span class="line">var arr = new Array();</span><br><span class="line">arr[0] = 5;</span><br><span class="line">arr[1] = &apos;x&apos;;</span><br><span class="line">arr[2] = true;</span><br><span class="line">console.log(typeof Object);//返回function,说明对象都是通过函数来创建的</span><br><span class="line">console.log(typeof Array);//返回function,说明对象都是通过函数来创建的</span><br></pre></td></tr></table></figure></p><p><strong>说明:</strong> 对象是函数创建的，而函数却又是一种对象</p><p>###2. prototype原型(函数)<br><strong>prototype</strong>是函数的一个属性,也就是说,<strong>每一个函数都有一个prototype的属性</strong>,而这个<strong>prototype</strong>的属性的值实际上是一个<strong><em>对象</em></strong>,这个对象默认只有一个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_1.png)</span><br><span class="line">**说明:**如上图所示,SuperType是一个函数,SuperType Prototype是SuperType的原型.</span><br><span class="line">原型既然作为对象,属性的集合,肯定可以自定义很多属性,例如Object:</span><br><span class="line">![](img/prototype_2.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###3. 构造函数中的属性和原型中的属性区别###</span><br><span class="line">1. 把属性定义在原型中比定义在构造函数中消耗的内存更小,因为在内存中一个类的原型只有一个,写在原型中的行为可以被所有实例共享,实例化的时候并不会再内存中再复制一份.因此,如果没有特殊原因,我们一般把属性写到类中,而***行为***写到原型中.</span><br></pre></td></tr></table></figure></p><p>//定义在构造函数内<br>   function Person() {<br>       this.arr = [1, 2, 3, 4, 5];<br>   }<br>   var p1 = new Person();<br>   var p2 = new Person();<br>   p1.arr.push(6);<br>   console.log(p1.arr);//输出[1, 2, 3, 4, 5, 6]<br>   console.log(p2.arr);//输出[1, 2, 3, 4, 5]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**示例说明:**根据输出结果,可以看出p1对象中的arr属性和p2对象中的arr属性是两个不同的数组对象.</span><br></pre></td></tr></table></figure></p><p>//定义在原型内<br>   function Person() {}<br>   Person.prototype.arr = [1, 2, 3, 4, 5];<br>   var p1 = new Person();<br>   var p2 = new Person();<br>   p1.arr.push(6);<br>   console.log(p1.arr);//输出[1, 2, 3, 4, 5, 6]<br>   console.log(p2.arr);//输出[1, 2, 3, 4, 5, 6]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**示例说明:**使用原型的方式定义属性,实际上不同对象中的属性是共享的,也就是说,对其中任何一个对象修改了其中的属性值,其他对象的属性也会发生变化,因为他们共享的是同一个属性.</span><br><span class="line">2. 构造函数中定义的属性或方法要比在原型中定义的属性和方法的优先级高,如果定义了同名称的属性和方法,构造函数中的将会覆盖原型中的.</span><br><span class="line"></span><br><span class="line">###4. 隐式原型(对象)</span><br><span class="line">隐式原型: ```__proto__```是对象的一个属性,即**每个对象都有一个```__proto__```属性**,也称为隐式原型.</span><br></pre></td></tr></table></figure></p><p>function Person() {}<br>var p1 = new Person();<br>console.log(p1.<strong>proto</strong>);//对象的隐式原型<br>console.log(Person.prototype);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_4.png)</span><br><span class="line">**示例说明:**根据输出结果表明,对象的```__proto__```属性和函数的```prototype```结果一样,```obj.__proto__===Object.prototype```为true,即,每个对象都有一个```__proto__```属性,指向创建该对象的函数的```prototype</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_7.png" alt=""><br>前面说过,函数的prototype本身就是一个对象,那么,这个对象的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_6.png)</span><br><span class="line">**说明:**</span><br><span class="line">1. 自定义函数本质上都是通过Object函数来创建的,所以它的```__proto__```指向的```Object.prototype</span><br></pre></td></tr></table></figure></p><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**函数也是一种对象,函数也有```__proto__```吗?**</span><br></pre></td></tr></table></figure></li></ol><p>function add(x, y) {<br>    return x + y;<br>}<br>console.log(add(10, 30));<br>var fn1 = new Function(“x”, “y”, “return x + y”);<br>console.log(fn1(10, 20));<br>console.log(fn1.<strong>proto</strong> === Function.prototype);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**说明:**函数是被Function创建</span><br><span class="line">根据对象的```__proto__```属性指向的是创建它的函数的prototype,因此```Object.__proto__ === Function.prototype</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_9.png" alt=""><br><strong>说明:</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_10.png)</span><br><span class="line">**说明: **Function.prototype指向的对象是被Object创建的对象,它的```__proto__```指向```Object.prototype</span><br></pre></td></tr></table></figure></p><p>###5. instanceof<br>对于值类型,可以通过typeof判断,string/number/boolean都很清楚,但是typeof在判断引用类型的时候,返回值只有object/function,你不知道它到底是一个object对象,还是数组等.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;&#125;</span><br><span class="line">var fn = new Foo();</span><br><span class="line">console.log(fn instanceof Foo);//true</span><br><span class="line">console.log(fn instanceof Object);//true</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_11.png" alt=""><br><strong>instanceof判断规则:</strong> A instanceof B, 沿着A的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">console.log(Object instanceof Function);</span><br><span class="line">console.log(Function instanceof Object);</span><br><span class="line">console.log(Function instanceof Function);</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_12.png" alt=""></p><p>###6. 原型链###<br>访问一个对象的属性时,先在基本属性中查找,如果没有,沿着<code>__proto__</code>这条链向上找,这就是原型链.<br><img src="img/prototype_13.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##prototype原型&lt;/p&gt;
&lt;p&gt;###1. 函数与对象的关系&lt;/p&gt;
&lt;p&gt; **1.1 函数就是对象的一种，因为通过&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/09/23/hello-world/"/>
    <id>http://yoursite.com/2015/09/23/hello-world/</id>
    <published>2015-09-22T16:00:00.000Z</published>
    <updated>2018-04-28T07:22:49.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
