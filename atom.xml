<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zy499</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-28T06:52:39.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>媒体查询使用——@media</title>
    <link href="http://yoursite.com/2018/04/28/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/04/28/媒体查询/</id>
    <published>2018-04-28T06:39:16.810Z</published>
    <updated>2018-04-28T06:52:39.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="媒体查询使用方法-media"><a href="#媒体查询使用方法-media" class="headerlink" title="媒体查询使用方法@media"></a>媒体查询使用方法@media</h1><p>标签（空格分隔）： css3,html5</p><hr><p>Media Queries能在不同的条件下使用不同的样式，使页面在不同在终端设备下达到不同的渲染效果。前面简单的介绍了Media Queries如何引用到项目中，但Media Queries有其自己的使用规则。具体来说,Media Queries的使用方法如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media 媒体类型and （媒体特性）&#123;你的样式&#125;</span><br></pre></td></tr></table></figure></p><p>注意：使用Media Queries必须要使用“@media”开头，然后指定媒体类型（也可以称为设备类型），随后是指定媒体特性（也可以称之为设备特性）。媒体特性的书写方式和样式的书写方式非常相似，主要分为两个部分，第一个部分指的是媒体特性，第二部分为媒体特性所指定的值，而且这两个部分之间使用冒号分隔。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(max-width: 480px)</span><br></pre></td></tr></table></figure></p><p>从前面表中可以得知，主要有十种媒体类型和13种媒体特性，将其组合就类似于不同的CSS集合。<br>但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断，<br>而不是使用小于（&lt;）和大于（&gt;）这样的符号来判断。接下来一起来看看Media Queries在实际项目中常用的方式。</p><h2 id="1-最大宽度max-width"><a href="#1-最大宽度max-width" class="headerlink" title="1.最大宽度max-width"></a>1.最大宽度max-width</h2><p>“max-width”是媒体特性中最常用的一个特性，其意思是指媒体类型小于或等于指定的宽度时，样式生效。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:480px)&#123;</span><br><span class="line"> .ads &#123;</span><br><span class="line">   display:none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面表示的是：当屏幕小于或等于480px时,页面中的广告区块（.ads）都将被隐藏。</p><h2 id="2-最小宽度min-width"><a href="#2-最小宽度min-width" class="headerlink" title="2.最小宽度min-width"></a>2.最小宽度min-width</h2><p>“min-width”与“max-width”相反，指的是媒体类型大于或等于指定宽度时，样式生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:900px)&#123;</span><br><span class="line">.wrapper&#123;width: 980px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面表示的是：当屏幕大于或等于900px时，容器“.wrapper”的宽度为980px。</p><h2 id="3-多个媒体特性使用"><a href="#3-多个媒体特性使用" class="headerlink" title="3.多个媒体特性使用"></a>3.多个媒体特性使用</h2><p>Media Queries可以使用关键词”and”将多个媒体特性结合在一起。也就是说，一个Media Query中可以包含0到多个表达式，表达式又可以包含0到多个关键字，以及一种媒体类型。</p><p>当屏幕在600px~900px之间时，body的背景色渲染为“#f5f5f5”，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:600px) and (max-width:900px)&#123;</span><br><span class="line">  body &#123;background-color:#f5f5f5;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-设备屏幕的输出宽度Device-Width"><a href="#4-设备屏幕的输出宽度Device-Width" class="headerlink" title="4.设备屏幕的输出宽度Device Width"></a>4.设备屏幕的输出宽度Device Width</h2><p>在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>上面的代码指的是“iphone.css”样式适用于最大设备宽度为480px，比如说iPhone上的显示，这里的“max-device-width”所指的是设备的实际分辨率，也就是指可视面积分辨率。</p><ol start="5"><li>not关键词</li></ol><hr><p>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media not print and (max-width: 1200px)&#123;样式代码&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码表示的是：样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。</p><h2 id="6-only关键词"><a href="#6-only关键词" class="headerlink" title="6.only关键词"></a>6.only关键词</h2><hr><p>only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width:240px)&quot; href=&quot;android240.css&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>在Media Query中如果没有明确指定Media Type，那么其默认为all，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;(min-width:701px) and (max-width:900px)&quot; href=&quot;mediu.css&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>上面代码中style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。</p><p>到目前为止，CSS3 Media Queries得到了众多浏览器支持，除了IE6-8浏览器不支持之外，在所有现代浏览器中都可以完美支持。还有一个与众不同的是，Media Queries在其他浏览器中不要像其他CSS3属性一样在不同的浏览器中添加前缀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;媒体查询使用方法-media&quot;&gt;&lt;a href=&quot;#媒体查询使用方法-media&quot; class=&quot;headerlink&quot; title=&quot;媒体查询使用方法@media&quot;&gt;&lt;/a&gt;媒体查询使用方法@media&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： css3,html5&lt;/
      
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/html/css/"/>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>js数组方法大全</title>
    <link href="http://yoursite.com/2016/03/29/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/03/29/js数组方法/</id>
    <published>2016-03-28T16:00:00.000Z</published>
    <updated>2018-05-11T15:03:58.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js数组方法大全"><a href="#js数组方法大全" class="headerlink" title="js数组方法大全"></a>js数组方法大全</h1><h2 id="JavaScript中创建数组有两种方式"><a href="#JavaScript中创建数组有两种方式" class="headerlink" title="JavaScript中创建数组有两种方式"></a>JavaScript中创建数组有两种方式</h2><h3 id="（一）使用-Array-构造函数："><a href="#（一）使用-Array-构造函数：" class="headerlink" title="（一）使用 Array 构造函数："></a>（一）使用 Array 构造函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = new Array(); //创建一个空数组</span><br><span class="line">var arr2 = new Array(20); // 创建一个包含20项的数组</span><br><span class="line">var arr3 = new Array(&quot;lily&quot;,&quot;lucy&quot;,&quot;Tom&quot;); // 创建一个包含3个字符串的数组</span><br></pre></td></tr></table></figure><h3 id="（二）使用数组字面量表示法："><a href="#（二）使用数组字面量表示法：" class="headerlink" title="（二）使用数组字面量表示法："></a>（二）使用数组字面量表示法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr4 = []; //创建一个空数组</span><br><span class="line">var arr5 = [20]; // 创建一个包含1项的数组</span><br><span class="line">var arr6 = [&quot;lily&quot;,&quot;lucy&quot;,&quot;Tom&quot;]; // 创建一个包含3个字符串的数组</span><br></pre></td></tr></table></figure><hr><h3 id="数组的方法有数组原型方法，也有从object对象继承来的方法，这里我们只介绍数组的原型方法，数组原型方法主要有以下这些："><a href="#数组的方法有数组原型方法，也有从object对象继承来的方法，这里我们只介绍数组的原型方法，数组原型方法主要有以下这些：" class="headerlink" title="数组的方法有数组原型方法，也有从object对象继承来的方法，这里我们只介绍数组的原型方法，数组原型方法主要有以下这些："></a>数组的方法有数组原型方法，也有从object对象继承来的方法，这里我们只介绍数组的原型方法，数组原型方法主要有以下这些：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">join()</span><br><span class="line">push()和pop()</span><br><span class="line">shift() 和 unshift()</span><br><span class="line">sort()</span><br><span class="line">reverse()</span><br><span class="line">concat()</span><br><span class="line">slice()</span><br><span class="line">splice()</span><br><span class="line">indexOf()和 lastIndexOf() （ES5新增）</span><br><span class="line">forEach() （ES5新增）</span><br><span class="line">map() （ES5新增）</span><br><span class="line">filter() （ES5新增）</span><br><span class="line">every() （ES5新增）</span><br><span class="line">some() （ES5新增）</span><br><span class="line">reduce()和 reduceRight() （ES5新增）</span><br></pre></td></tr></table></figure><hr><p>下面详细介绍一下各个方法的基本功能。</p><h3 id="1、join"><a href="#1、join" class="headerlink" title="1、join()"></a>1、join()</h3><p>join(separator): 将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">console.log(arr.join()); // 1,2,3</span><br><span class="line">console.log(arr.join(&quot;-&quot;)); // 1-2-3</span><br><span class="line">console.log(arr); // [1, 2, 3]（原数组不变）</span><br><span class="line">通过join()方法可以实现重复字符串，只需传入字符串以及重复的次数，就能返回重复后的字符串，函数如下：</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function repeatString(str, n) &#123;</span><br><span class="line">return new Array(n + 1).join(str);</span><br><span class="line">&#125;</span><br><span class="line">console.log(repeatString(&quot;abc&quot;, 3)); // abcabcabc</span><br><span class="line">console.log(repeatString(&quot;Hi&quot;, 5)); // HiHiHiHiHi</span><br></pre></td></tr></table></figure><h3 id="2、push-和pop"><a href="#2、push-和pop" class="headerlink" title="2、push()和pop()"></a>2、push()和pop()</h3><p>push(): 可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<br>pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;Lily&quot;,&quot;lucy&quot;,&quot;Tom&quot;];</span><br><span class="line">var count = arr.push(&quot;Jack&quot;,&quot;Sean&quot;);</span><br><span class="line">console.log(count); // 5</span><br><span class="line">console.log(arr); // [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;, &quot;Sean&quot;]</span><br><span class="line">var item = arr.pop();</span><br><span class="line">console.log(item); // Sean</span><br><span class="line">console.log(arr); // [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="3、shift-和-unshift"><a href="#3、shift-和-unshift" class="headerlink" title="3、shift() 和 unshift()"></a>3、shift() 和 unshift()</h3><p>shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。<br>unshift:将参数添加到原数组开头，并返回数组的长度 。</p><p>这组方法和上面的push()和pop()方法正好对应，一个是操作数组的开头，一个是操作数组的结尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;Lily&quot;,&quot;lucy&quot;,&quot;Tom&quot;];</span><br><span class="line">var count = arr.unshift(&quot;Jack&quot;,&quot;Sean&quot;);</span><br><span class="line">console.log(count); // 5</span><br><span class="line">console.log(arr); //[&quot;Jack&quot;, &quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</span><br><span class="line">var item = arr.shift();</span><br><span class="line">console.log(item); // Jack</span><br><span class="line">console.log(arr); // [&quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="4、sort"><a href="#4、sort" class="headerlink" title="4、sort()"></a>4、sort()</h3><p>sort()：按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。</p><p>在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串，因此会出现以下的这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [&quot;a&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;];</span><br><span class="line">console.log(arr1.sort()); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">arr2 = [13, 24, 51, 3];</span><br><span class="line">console.log(arr2.sort()); // [13, 24, 3, 51]</span><br><span class="line">console.log(arr2); // [13, 24, 3, 51](元数组被改变)</span><br></pre></td></tr></table></figure></p><p>为了解决上述问题，sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。以下就是一个简单的比较函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function compare(value1, value2) &#123;</span><br><span class="line">if (value1 &lt; value2) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125; else if (value1 &gt; value2) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr2 = [13, 24, 51, 3];</span><br><span class="line">console.log(arr2.sort(compare)); // [3, 13, 24, 51]</span><br></pre></td></tr></table></figure></p><p>如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function compare(value1, value2) &#123;</span><br><span class="line">if (value1 &lt; value2) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; else if (value1 &gt; value2) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr2 = [13, 24, 51, 3];</span><br><span class="line">console.log(arr2.sort(compare)); // [51, 24, 13, 3]</span><br></pre></td></tr></table></figure></p><h3 id="5、reverse"><a href="#5、reverse" class="headerlink" title="5、reverse()"></a>5、reverse()</h3><p>reverse()：反转数组项的顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [13, 24, 51, 3];</span><br><span class="line">console.log(arr.reverse()); //[3, 51, 24, 13]</span><br><span class="line">console.log(arr); //[3, 51, 24, 13](原数组改变)</span><br></pre></td></tr></table></figure></p><h3 id="6、concat"><a href="#6、concat" class="headerlink" title="6、concat()"></a>6、concat()</h3><p>concat() ：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7];</span><br><span class="line">var arrCopy = arr.concat(9,[11,13]);</span><br><span class="line">console.log(arrCopy); //[1, 3, 5, 7, 9, 11, 13]</span><br><span class="line">console.log(arr); // [1, 3, 5, 7](原数组未被修改)</span><br></pre></td></tr></table></figure></p><p>从上面测试结果可以发现：传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。但是如果传入的是一个二维数组呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arrCopy2 = arr.concat([9,[11,13]]);</span><br><span class="line">console.log(arrCopy2); //[1, 3, 5, 7, 9, Array[2]]</span><br><span class="line">console.log(arrCopy2[5]); //[11, 13]</span><br></pre></td></tr></table></figure></p><p>上述代码中，arrCopy2数组的第五项是一个包含两项的数组，也就是说concat方法只能将传入数组中的每一项添加到数组中，如果传入数组中有些项是数组，那么也会把这一数组项当作一项添加到arrCopy2中。</p><h3 id="7、slice"><a href="#7、slice" class="headerlink" title="7、slice()"></a>7、slice()</h3><p>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7,9,11];</span><br><span class="line">var arrCopy = arr.slice(1);</span><br><span class="line">var arrCopy2 = arr.slice(1,4);</span><br><span class="line">var arrCopy3 = arr.slice(1,-2);</span><br><span class="line">var arrCopy4 = arr.slice(-4,-1);</span><br><span class="line">console.log(arr); //[1, 3, 5, 7, 9, 11](原数组没变)</span><br><span class="line">console.log(arrCopy); //[3, 5, 7, 9, 11]</span><br><span class="line">console.log(arrCopy2); //[3, 5, 7]</span><br><span class="line">console.log(arrCopy3); //[3, 5, 7]</span><br><span class="line">console.log(arrCopy4); //[5, 7, 9]</span><br><span class="line">arrCopy只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。 </span><br><span class="line">arrCopy2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。 </span><br><span class="line">arrCopy3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。 </span><br><span class="line">arrCopy4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2,5)。</span><br></pre></td></tr></table></figure></p><h3 id="8、splice"><a href="#8、splice" class="headerlink" title="8、splice()"></a>8、splice()</h3><p>splice()：很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。<br>删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。<br>插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。<br>替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。</p><p>splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7,9,11];</span><br><span class="line">var arrRemoved = arr.splice(0,2);</span><br><span class="line">console.log(arr); //[5, 7, 9, 11]</span><br><span class="line">console.log(arrRemoved); //[1, 3]</span><br><span class="line">var arrRemoved2 = arr.splice(2,0,4,6);</span><br><span class="line">console.log(arr); // [5, 7, 4, 6, 9, 11]</span><br><span class="line">console.log(arrRemoved2); // []</span><br><span class="line">var arrRemoved3 = arr.splice(1,1,2,4);</span><br><span class="line">console.log(arr); // [5, 2, 4, 4, 6, 9, 11]</span><br><span class="line">console.log(arrRemoved3); //[7]</span><br></pre></td></tr></table></figure></p><h3 id="9、indexOf-和-lastIndexOf"><a href="#9、indexOf-和-lastIndexOf" class="headerlink" title="9、indexOf()和 lastIndexOf()"></a>9、indexOf()和 lastIndexOf()</h3><p>indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。<br>lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。</p><p>这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回1。在比较第一个参数与数组中的每一项时，会使用全等操作符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,5,7,7,5,3,1];</span><br><span class="line">console.log(arr.indexOf(5)); //2</span><br><span class="line">console.log(arr.lastIndexOf(5)); //5</span><br><span class="line">console.log(arr.indexOf(5,2)); //2</span><br><span class="line">console.log(arr.lastIndexOf(5,4)); //2</span><br><span class="line">console.log(arr.indexOf(&quot;5&quot;)); //-1</span><br></pre></td></tr></table></figure></p><h3 id="10、forEach"><a href="#10、forEach" class="headerlink" title="10、forEach()"></a>10、forEach()</h3><p>forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">arr.forEach(function(x, index, a)&#123;</span><br><span class="line">console.log(x + &apos;|&apos; + index + &apos;|&apos; + (a === arr));</span><br><span class="line">&#125;);</span><br><span class="line">// 输出为：</span><br><span class="line">// 1|0|true</span><br><span class="line">// 2|1|true</span><br><span class="line">// 3|2|true</span><br><span class="line">// 4|3|true</span><br><span class="line">// 5|4|true</span><br></pre></td></tr></table></figure></p><h3 id="11、map"><a href="#11、map" class="headerlink" title="11、map()"></a>11、map()</h3><p>map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</p><p>下面代码利用map方法实现数组中每个数求平方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">var arr2 = arr.map(function(item)&#123;</span><br><span class="line">return item*item;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr2); //[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure></p><h3 id="12、filter"><a href="#12、filter" class="headerlink" title="12、filter()"></a>12、filter()</h3><p>filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">var arr2 = arr.filter(function(x, index) &#123;</span><br><span class="line">return index % 3 === 0 || x &gt;= 8;</span><br><span class="line">&#125;); </span><br><span class="line">console.log(arr2); //[1, 4, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure></p><h3 id="13、every"><a href="#13、every" class="headerlink" title="13、every()"></a>13、every()</h3><p>every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">var arr2 = arr.every(function(x) &#123;</span><br><span class="line">return x &lt; 10;</span><br><span class="line">&#125;); </span><br><span class="line">console.log(arr2); //true</span><br><span class="line">var arr3 = arr.every(function(x) &#123;</span><br><span class="line">return x &lt; 3;</span><br><span class="line">&#125;); </span><br><span class="line">console.log(arr3); // false</span><br></pre></td></tr></table></figure></p><h3 id="14、some"><a href="#14、some" class="headerlink" title="14、some()"></a>14、some()</h3><p>some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">var arr2 = arr.some(function(x) &#123;</span><br><span class="line">return x &lt; 3;</span><br><span class="line">&#125;); </span><br><span class="line">console.log(arr2); //true</span><br><span class="line">var arr3 = arr.some(function(x) &#123;</span><br><span class="line">return x &lt; 1;</span><br><span class="line">&#125;); </span><br><span class="line">console.log(arr3); // false</span><br></pre></td></tr></table></figure></p><h3 id="15、reduce-和-reduceRight"><a href="#15、reduce-和-reduceRight" class="headerlink" title="15、reduce()和 reduceRight()"></a>15、reduce()和 reduceRight()</h3><p>这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</p><p>这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。</p><p>传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p><p>下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var values = [1,2,3,4,5];</span><br><span class="line">var sum = values.reduceRight(function(prev, cur, index, array)&#123;</span><br><span class="line">return prev + cur;</span><br><span class="line">&#125;,10);</span><br><span class="line">console.log(sum); //25</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js数组方法大全&quot;&gt;&lt;a href=&quot;#js数组方法大全&quot; class=&quot;headerlink&quot; title=&quot;js数组方法大全&quot;&gt;&lt;/a&gt;js数组方法大全&lt;/h1&gt;&lt;h2 id=&quot;JavaScript中创建数组有两种方式&quot;&gt;&lt;a href=&quot;#JavaScrip
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>作用域与执行上下文</title>
    <link href="http://yoursite.com/2015/10/29/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://yoursite.com/2015/10/29/作用域与执行上下文/</id>
    <published>2015-10-28T16:00:00.000Z</published>
    <updated>2018-05-01T06:55:23.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域和执行上下文"><a href="#作用域和执行上下文" class="headerlink" title="作用域和执行上下文"></a>作用域和执行上下文</h3><p>除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时确定。<br><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = 10, b = 20;</span><br><span class="line">function fn(x) &#123;</span><br><span class="line">    var a = 100, c = 300;</span><br><span class="line">    function bar(x) &#123;</span><br><span class="line">        var a = 1000, d = 4000;</span><br><span class="line">    &#125;</span><br><span class="line">    bar(100);</span><br><span class="line">bar(200);</span><br><span class="line">&#125;</span><br><span class="line">fn(10);</span><br></pre></td></tr></table></figure></p><p><strong>1. 作用域和执行上下文关系如图:</strong><br><img src="img/ExecutionContext_14.png" alt=""><br><strong>说明:</strong> 作用域只是一个”地盘”,一个抽象的概念,其中没有变量.要通过作用域对应的执行上下文环境来获取变量的值.在同一个作用域下,不同的调用会产生不同的执行上下文环境,继而产生不同的变量的值.</p><p><strong>2. 自由变量</strong><br>在A作用域中使用的变量x,却没有在A作用域中声明(即在其他作用域中声明的),对于A作用域来说,x就是一个自由变量.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(x); //这里的x就是一个自由变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3. 作用域链</strong></p><ol><li>先在当前作用域查找x,如果有则获取并结束,如果没有则继续;</li><li>如果当前作用域是全局作用域，则证明x未定义，结束；否则继续；</li><li>（不是全局作用域，那就是函数作用域）将创建该函数的作用域作为当前作用域；</li><li>跳转到第一步。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;作用域和执行上下文&quot;&gt;&lt;a href=&quot;#作用域和执行上下文&quot; class=&quot;headerlink&quot; title=&quot;作用域和执行上下文&quot;&gt;&lt;/a&gt;作用域和执行上下文&lt;/h3&gt;&lt;p&gt;除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>原型</title>
    <link href="http://yoursite.com/2015/10/28/02_prototype%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2015/10/28/02_prototype原型/</id>
    <published>2015-10-28T00:53:22.000Z</published>
    <updated>2018-04-28T07:15:00.542Z</updated>
    
    <content type="html"><![CDATA[<p>##prototype原型</p><p>###1. 函数与对象的关系</p><p> **1.1 函数就是对象的一种，因为通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">function fn() &#123;&#125;</span><br><span class="line">console.log(fn instanceof Object);//返回为true,说明函数是对象类型</span><br></pre></td></tr></table></figure></p><p> <strong>1.2 对象是函数创建的</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line">obj.a = 10;</span><br><span class="line">obj.b = 20;</span><br><span class="line">var arr = new Array();</span><br><span class="line">arr[0] = 5;</span><br><span class="line">arr[1] = &apos;x&apos;;</span><br><span class="line">arr[2] = true;</span><br><span class="line">console.log(typeof Object);//返回function,说明对象都是通过函数来创建的</span><br><span class="line">console.log(typeof Array);//返回function,说明对象都是通过函数来创建的</span><br></pre></td></tr></table></figure></p><p><strong>说明:</strong> 对象是函数创建的，而函数却又是一种对象</p><p>###2. prototype原型(函数)<br><strong>prototype</strong>是函数的一个属性,也就是说,<strong>每一个函数都有一个prototype的属性</strong>,而这个<strong>prototype</strong>的属性的值实际上是一个<strong><em>对象</em></strong>,这个对象默认只有一个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_1.png)</span><br><span class="line">**说明:**如上图所示,SuperType是一个函数,SuperType Prototype是SuperType的原型.</span><br><span class="line">原型既然作为对象,属性的集合,肯定可以自定义很多属性,例如Object:</span><br><span class="line">![](img/prototype_2.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###3. 构造函数中的属性和原型中的属性区别###</span><br><span class="line">1. 把属性定义在原型中比定义在构造函数中消耗的内存更小,因为在内存中一个类的原型只有一个,写在原型中的行为可以被所有实例共享,实例化的时候并不会再内存中再复制一份.因此,如果没有特殊原因,我们一般把属性写到类中,而***行为***写到原型中.</span><br></pre></td></tr></table></figure></p><p>//定义在构造函数内<br>   function Person() {<br>       this.arr = [1, 2, 3, 4, 5];<br>   }<br>   var p1 = new Person();<br>   var p2 = new Person();<br>   p1.arr.push(6);<br>   console.log(p1.arr);//输出[1, 2, 3, 4, 5, 6]<br>   console.log(p2.arr);//输出[1, 2, 3, 4, 5]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**示例说明:**根据输出结果,可以看出p1对象中的arr属性和p2对象中的arr属性是两个不同的数组对象.</span><br></pre></td></tr></table></figure></p><p>//定义在原型内<br>   function Person() {}<br>   Person.prototype.arr = [1, 2, 3, 4, 5];<br>   var p1 = new Person();<br>   var p2 = new Person();<br>   p1.arr.push(6);<br>   console.log(p1.arr);//输出[1, 2, 3, 4, 5, 6]<br>   console.log(p2.arr);//输出[1, 2, 3, 4, 5, 6]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**示例说明:**使用原型的方式定义属性,实际上不同对象中的属性是共享的,也就是说,对其中任何一个对象修改了其中的属性值,其他对象的属性也会发生变化,因为他们共享的是同一个属性.</span><br><span class="line">2. 构造函数中定义的属性或方法要比在原型中定义的属性和方法的优先级高,如果定义了同名称的属性和方法,构造函数中的将会覆盖原型中的.</span><br><span class="line"></span><br><span class="line">###4. 隐式原型(对象)</span><br><span class="line">隐式原型: ```__proto__```是对象的一个属性,即**每个对象都有一个```__proto__```属性**,也称为隐式原型.</span><br></pre></td></tr></table></figure></p><p>function Person() {}<br>var p1 = new Person();<br>console.log(p1.<strong>proto</strong>);//对象的隐式原型<br>console.log(Person.prototype);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_4.png)</span><br><span class="line">**示例说明:**根据输出结果表明,对象的```__proto__```属性和函数的```prototype```结果一样,```obj.__proto__===Object.prototype```为true,即,每个对象都有一个```__proto__```属性,指向创建该对象的函数的```prototype</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_7.png" alt=""><br>前面说过,函数的prototype本身就是一个对象,那么,这个对象的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_6.png)</span><br><span class="line">**说明:**</span><br><span class="line">1. 自定义函数本质上都是通过Object函数来创建的,所以它的```__proto__```指向的```Object.prototype</span><br></pre></td></tr></table></figure></p><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**函数也是一种对象,函数也有```__proto__```吗?**</span><br></pre></td></tr></table></figure></li></ol><p>function add(x, y) {<br>    return x + y;<br>}<br>console.log(add(10, 30));<br>var fn1 = new Function(“x”, “y”, “return x + y”);<br>console.log(fn1(10, 20));<br>console.log(fn1.<strong>proto</strong> === Function.prototype);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**说明:**函数是被Function创建</span><br><span class="line">根据对象的```__proto__```属性指向的是创建它的函数的prototype,因此```Object.__proto__ === Function.prototype</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_9.png" alt=""><br><strong>说明:</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](img/prototype_10.png)</span><br><span class="line">**说明: **Function.prototype指向的对象是被Object创建的对象,它的```__proto__```指向```Object.prototype</span><br></pre></td></tr></table></figure></p><p>###5. instanceof<br>对于值类型,可以通过typeof判断,string/number/boolean都很清楚,但是typeof在判断引用类型的时候,返回值只有object/function,你不知道它到底是一个object对象,还是数组等.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;&#125;</span><br><span class="line">var fn = new Foo();</span><br><span class="line">console.log(fn instanceof Foo);//true</span><br><span class="line">console.log(fn instanceof Object);//true</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_11.png" alt=""><br><strong>instanceof判断规则:</strong> A instanceof B, 沿着A的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">console.log(Object instanceof Function);</span><br><span class="line">console.log(Function instanceof Object);</span><br><span class="line">console.log(Function instanceof Function);</span><br></pre></td></tr></table></figure></p><p><img src="img/prototype_12.png" alt=""></p><p>###6. 原型链###<br>访问一个对象的属性时,先在基本属性中查找,如果没有,沿着<code>__proto__</code>这条链向上找,这就是原型链.<br><img src="img/prototype_13.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##prototype原型&lt;/p&gt;
&lt;p&gt;###1. 函数与对象的关系&lt;/p&gt;
&lt;p&gt; **1.1 函数就是对象的一种，因为通过&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/09/23/hello-world/"/>
    <id>http://yoursite.com/2015/09/23/hello-world/</id>
    <published>2015-09-22T16:00:00.000Z</published>
    <updated>2018-04-28T07:22:49.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
